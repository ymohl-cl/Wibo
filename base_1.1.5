--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: topology; Type: SCHEMA; Schema: -; Owner: wibo
--

CREATE SCHEMA topology;


ALTER SCHEMA topology OWNER TO wibo;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry, geography, and raster spatial types and functions';


--
-- Name: postgis_topology; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis_topology WITH SCHEMA topology;


--
-- Name: EXTENSION postgis_topology; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis_topology IS 'PostGIS topology spatial types and functions';


SET search_path = public, pg_catalog;

--
-- Name: create_statsballon(); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION create_statsballon() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        --
        -- Create a row in stats_container to reflect the operation performed on container,
        -- make use of the special variable TG_OP to work out the operation.
        --
       
        IF (TG_OP = 'INSERT') THEN
            INSERT INTO stats_container VAlUES (NEW.id, 0, 0, 0, 0);
            RETURN NEW;
        END IF;
        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$$;


ALTER FUNCTION public.create_statsballon() OWNER TO wibo;

--
-- Name: create_statsuser(); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION create_statsuser() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        --
        -- Create a row in stats_users to reflect the operation performed on user,
        -- make use of the special variable TG_OP to work out the operation.
        --
       
        IF (TG_OP = 'INSERT') THEN
            INSERT INTO stats_users VAlUES (0, 0, 0, 0, NEW.id_user);
            RETURN NEW;
        END IF;
        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$$;


ALTER FUNCTION public.create_statsuser() OWNER TO wibo;

--
-- Name: getalldevices(); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION getalldevices() RETURNS TABLE(deviceid integer, userid integer)
    LANGUAGE plpgsql
    AS $$ BEGIN RETURN QUERY EXECUTE 'SELECT device.id AS DeviceId, device.user_id_user AS UserId, FROM device LEFT OUTER JOIN "user" ON (device.user_id_user = "user".id_user)'; END  $$;


ALTER FUNCTION public.getalldevices() OWNER TO wibo;

--
-- Name: getcontainers(); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION getcontainers() RETURNS TABLE(idballon integer, idtype integer, direction numeric, speedcont integer, creationdate date, locationcont text)
    LANGUAGE plpgsql
    AS $$ 
 BEGIN  RETURN  QUERY EXECUTE 'SELECT  container.id AS contIndex, container.id_type_c AS TypeCode, container.direction AS contDirection, container.speed AS contSpeed, container.creationdate as dateCreationCon, ST_AsText(container.location_ct) FROM container';  END$$;


ALTER FUNCTION public.getcontainers() OWNER TO wibo;

--
-- Name: getcontainersbyuserid(integer); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION getcontainersbyuserid(iduser integer) RETURNS TABLE(idballon integer, titlename character varying, idtype integer, direction double precision, speedcont double precision, creationdate timestamp without time zone, locationcont text, ianix integer)
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY SELECT container.id AS contIndex, container.titlename AS TitleName, container.id_type_c AS TypeCode, container.direction AS contDirection, container.speed AS contSpeed, date(container.creationdate) + interval '1 hour',   ST_AsText(container.location_ct), container.ianix FROM container  WHERE idcreator = iduser;  END $$;


ALTER FUNCTION public.getcontainersbyuserid(iduser integer) OWNER TO wibo;

--
-- Name: getcontainersbyuseridjson(integer); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION getcontainersbyuseridjson(iduser integer) RETURNS TABLE(idballon integer, titlename character varying, idtype integer, direction numeric, speedcont integer, creationdate date, locationcont text)
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY SELECT container.id AS contIndex, container.titlename AS TitleName, container.id_type_c AS TypeCode, container.direction AS contDirection, container.speed AS contSpeed, container.creationdate as dateCreationCon,  ST_AsGeoJson(container.location_ct)  FROM container  WHERE idcreator = iduser;  END $$;


ALTER FUNCTION public.getcontainersbyuseridjson(iduser integer) OWNER TO wibo;

--
-- Name: getcontainersjson(); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION getcontainersjson() RETURNS TABLE(idballon integer, idtype integer, direction numeric, speedcont integer, creationdate date, locationcont text)
    LANGUAGE plpgsql
    AS $$ 
 BEGIN  RETURN  QUERY EXECUTE 'SELECT  container.id AS contIndex, container.id_type_c AS TypeCode, container.direction AS contDirection, container.speed AS contSpeed, container.creationdate as dateCreationCon, ST_AsGeoJson(container.location_ct) FROM container';  END$$;


ALTER FUNCTION public.getcontainersjson() OWNER TO wibo;

--
-- Name: getdevicesbyuserid(integer); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION getdevicesbyuserid(iduser integer) RETURNS TABLE(idclientdevice character varying)
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY SELECT  device.idclient AS IdClientDevice FROM device WHERE user_id_user = iduser; END  $$;


ALTER FUNCTION public.getdevicesbyuserid(iduser integer) OWNER TO wibo;

--
-- Name: insertcheckpoints(date, double precision, double precision, integer, boolean); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION insertcheckpoints(cdate date, latitudec double precision, longitudec double precision, idcont integer, magnet boolean) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY INSERT INTO checkpoints (date, containerid, attractbymagnet, location_ckp) VALUES(cdte, idcont, magnet, ST_SetSRID(ST_MakePoint(latitudec, longitudec), 4326)) RETURNING id;  END; $$;


ALTER FUNCTION public.insertcheckpoints(cdate date, latitudec double precision, longitudec double precision, idcont integer, magnet boolean) OWNER TO wibo;

--
-- Name: insertcontainer(integer, double precision, double precision, double precision, double precision, text, integer, date); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION insertcontainer(idcreatorc integer, latitudec double precision, longitudec double precision, directionc double precision, speedc double precision, title text, idx integer, creation date) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY INSERT INTO container (direction, speed, location_ct, idcreator, titlename, ianix, creationdate) VALUES(directionc, speedc , ST_SetSRID(ST_MakePoint(latitudec, longitudec), 4326), idcreatorc, title, idx, creation) RETURNING id;  END; $$;


ALTER FUNCTION public.insertcontainer(idcreatorc integer, latitudec double precision, longitudec double precision, directionc double precision, speedc double precision, title text, idx integer, creation date) OWNER TO wibo;

--
-- Name: make_uid(); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION make_uid() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
    new_uid text;
done bool;
BEGIN
    done := false;
    WHILE NOT done LOOP new_uid := stringify_bigint(pseudo_encrypt(cast(extract(epoch from now())::integer as int)));
done := NOT exists(SELECT 1 FROM "user" WHERE mail=new_uid);
END LOOP;
    RETURN new_uid;
END;
$$;


ALTER FUNCTION public.make_uid() OWNER TO wibo;

--
-- Name: pseudo_encrypt(integer); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION pseudo_encrypt(value integer) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
l1 int;
l2 int;
r1 int;
r2 int;
i int:=0;
BEGIN
 l1:= (VALUE >> 16) & 65535;
 r1:= VALUE & 65535;
 WHILE i < 3 LOOP
   l2 := r1;
   r2 := l1 # ((((1366 * r1 + 150889) % 714021) / 714021.0) * 32767)::int;
   l1 := l2;
   r1 := r2;
   i := i + 1;
 END LOOP;
 RETURN ((r1 << 16) + l1);
END;
$$;


ALTER FUNCTION public.pseudo_encrypt(value integer) OWNER TO wibo;

--
-- Name: setsdefaultuserdata(double precision, double precision, date, date, bytea); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION setsdefaultuserdata(latc double precision, lonc double precision, lastlog date, creation date, pass bytea) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
done boolean:= false;
BEGIN
IF done = false THEN
    INSERT INTO "user"(id_type_g, groupname, passbyte, lastlogin, creationdate, mail, location_user) VALUES(2, 'user_default', pass, lastlog, creation, make_uid(), ST_SetSRID(ST_MakePoint(latc, lonc), 4326));
    RETURN (SELECT currval('user_id_user_seq'));
END IF;
RETURN -1;
END;
$$;


ALTER FUNCTION public.setsdefaultuserdata(latc double precision, lonc double precision, lastlog date, creation date, pass bytea) OWNER TO wibo;

--
-- Name: setstatballon(double precision, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION setstatballon(n_km double precision, n_cath integer, n_follow integer, n_magnet integer, idball integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
done boolean:= false;
BEGIN
 done :=  NOT exists(SELECT idball_stats FROM stats_container WHERE idball_stats=idball);
IF done = false THEN
    UPDATE stats_container SET(num_km, num_cath, num_follow, num_magnet) = ($1, $2, $3, $4) WHERE idball_stats=idball;
    RETURN TRUE;
END IF;
PERFORM 1 FROM stats_container WHERE idball_stats=idball LIMIT 1;
IF NOT FOUND THEN 
INSERT INTO stats_container(num_km, num_cath, num_follow, num_magnet, idball_stats) VALUES(n_km, n_cath, n_follow, n_magnet, idball);
RETURN TRUE;
END IF;
RETURN FALSE;
END;
$_$;


ALTER FUNCTION public.setstatballon(n_km double precision, n_cath integer, n_follow integer, n_magnet integer, idball integer) OWNER TO wibo;

--
-- Name: setstatsuser(integer, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION setstatsuser(n_cont integer, n_catch integer, n_follow integer, n_message integer, n_send integer, iduser integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
done boolean:= false;
BEGIN
 done :=  NOT exists(SELECT iduser_stats FROM stats_users WHERE iduser_stats=iduser);
IF done = false THEN
    UPDATE stats_users SET(num_owner, num_catch, num_follow, num_message, num_send) = ($1, $2, $3, $4, $5) WHERE iduser_stats=iduser;
    RETURN TRUE;
END IF;
PERFORM 1 FROM stats_users WHERE iduser_stats=iduser LIMIT 1;
IF NOT FOUND THEN 
INSERT INTO stats_users(num_owner, num_catch, num_follow, num_message, num_send, iduser_stats) VALUES(n_cont, n_catch, n_follow, n_message, n_send, iduser);
RETURN TRUE;
END IF;
RETURN FALSE;
END;
$_$;


ALTER FUNCTION public.setstatsuser(n_cont integer, n_catch integer, n_follow integer, n_message integer, n_send integer, iduser integer) OWNER TO wibo;

--
-- Name: setsuserdata(integer, character varying, double precision, double precision, date, date, character varying, bytea); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION setsuserdata(idtypeg integer, groupnamec character varying, latc double precision, lonc double precision, creation date, lastlog date, mailc character varying, pass bytea) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
done boolean:= false;
BEGIN
 done :=  NOT exists(SELECT mail FROM "user");
IF done = true THEN
    INSERT INTO "user"(id_type_g, groupname, lastlogin, creationdate, mail, passbyte, location_user) VALUES(idtypeg, groupnamec, lastlog, creation, mailc, pass, ST_SetSRID(ST_MakePoint(latc, lonc), 4326));
    RETURN TRUE;
END IF;
PERFORM 1 FROM "user" WHERE mail=mailc LIMIT 1;
IF FOUND THEN
UPDATE "user" SET(lastlogin, location_user) = (lastlog, ST_SetSRID(ST_MakePoint(latc, lonc), 4326)) WHERE mail = mailc;
RETURN TRUE;
END IF;
RETURN FALSE;
END;
$$;


ALTER FUNCTION public.setsuserdata(idtypeg integer, groupnamec character varying, latc double precision, lonc double precision, creation date, lastlog date, mailc character varying, pass bytea) OWNER TO wibo;

--
-- Name: setsuserdata2(integer, character varying, double precision, double precision, date, date, character varying, bytea); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION setsuserdata2(idtypeg integer, groupnamec character varying, latc double precision, lonc double precision, creation date, lastlog date, mailc character varying, pass bytea) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
done boolean:= false;
iduser integer := 0;
BEGIN
 done :=  NOT exists(SELECT mail FROM "user");
IF done = false THEN
    INSERT INTO "user"(id_type_g, groupname, lastlogin, creationdate, mail, passbyte, location_user) VALUES(idtypeg, groupnamec, lastlog, creation, mailc, pass, ST_SetSRID(ST_MakePoint(latc, lonc), 4326));
    RETURN (SELECT currval('user_id_user_seq'));

END IF;
PERFORM 1 FROM "user" WHERE mail=mailc LIMIT 1;
IF FOUND THEN
 UPDATE "user" SET(lastlogin, location_user) = (lastlog, ST_SetSRID(ST_MakePoint(latc, lonc), 4326)) WHERE mail=mailc;
RETURN (SELECT id_user FROM "user" WHERE mail=mailc);
END IF;
RETURN -1;
END;
$$;


ALTER FUNCTION public.setsuserdata2(idtypeg integer, groupnamec character varying, latc double precision, lonc double precision, creation date, lastlog date, mailc character varying, pass bytea) OWNER TO wibo;

--
-- Name: stringify_bigint(bigint); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION stringify_bigint(n bigint) RETURNS text
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
 alphabet text:='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
 base int:=length(alphabet); 
 _n bigint:=abs(n);
 output text:='';
BEGIN
 LOOP
   output := output || substr(alphabet, 1+(_n%base)::int, 1);
   _n := _n / base; 
   EXIT WHEN _n=0;
 END LOOP;
 RETURN output;
END $$;


ALTER FUNCTION public.stringify_bigint(n bigint) OWNER TO wibo;

--
-- Name: updatelocationuser(integer, double precision, double precision); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION updatelocationuser(iduser integer, latitudec double precision, longitudec double precision) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY UPDATE "user" SET location_user = ST_SetSRID(ST_MakePoint(latitudec, longitudec), 4326) WHERE id_user = iduser RETURNING id_user;  END; $$;


ALTER FUNCTION public.updatelocationuser(iduser integer, latitudec double precision, longitudec double precision) OWNER TO wibo;

--
-- Name: updateuser(integer, double precision, double precision, date); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION updateuser(iduser integer, latitudec double precision, longitudec double precision, log date) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY UPDATE "user" SET location_user = ST_SetSRID(ST_MakePoint(latitudec, longitudec), 4326), lastlogin = log WHERE id_user = iduser RETURNING id_user;  END; $$;


ALTER FUNCTION public.updateuser(iduser integer, latitudec double precision, longitudec double precision, log date) OWNER TO wibo;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: checkpoints; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE checkpoints (
    id integer NOT NULL,
    date date NOT NULL,
    containerid integer NOT NULL,
    attractbymagnet boolean NOT NULL,
    location_ckp geography(Point,4326)
);


ALTER TABLE checkpoints OWNER TO wibo;

--
-- Name: checkpoints_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE checkpoints_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE checkpoints_id_seq OWNER TO wibo;

--
-- Name: checkpoints_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE checkpoints_id_seq OWNED BY checkpoints.id;


--
-- Name: type_container; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE type_container (
    id_type_c integer NOT NULL,
    typename character varying(255) NOT NULL
);


ALTER TABLE type_container OWNER TO wibo;

--
-- Name: container; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE container (
    id integer NOT NULL,
    direction double precision NOT NULL,
    speed double precision NOT NULL,
    location_ct geography(Point,4326),
    idcreator integer,
    titlename character varying(255),
    ianix integer,
    creationdate timestamp with time zone DEFAULT now(),
    idcurrentuser integer
)
INHERITS (type_container);


ALTER TABLE container OWNER TO wibo;

--
-- Name: container_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE container_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE container_id_seq OWNER TO wibo;

--
-- Name: container_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE container_id_seq OWNED BY container.id;


--
-- Name: type_device; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE type_device (
    id_type_d integer NOT NULL,
    typename character varying(255) NOT NULL
);


ALTER TABLE type_device OWNER TO wibo;

--
-- Name: device; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE device (
    id integer NOT NULL,
    idclient character varying(40) NOT NULL,
    user_id_user integer NOT NULL,
    lastusemagnet date
)
INHERITS (type_device);


ALTER TABLE device OWNER TO wibo;

--
-- Name: device_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE device_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE device_id_seq OWNER TO wibo;

--
-- Name: device_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE device_id_seq OWNED BY device.id;


--
-- Name: followed; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE followed (
    id integer NOT NULL,
    container_id integer NOT NULL,
    device_id integer,
    iduser integer
);


ALTER TABLE followed OWNER TO wibo;

--
-- Name: followed_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE followed_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE followed_id_seq OWNER TO wibo;

--
-- Name: followed_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE followed_id_seq OWNED BY followed.id;


--
-- Name: globalstats; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE globalstats (
    num_users integer,
    num_follow integer DEFAULT 0,
    num_message integer DEFAULT 0,
    num_send integer DEFAULT 0,
    num_cont integer DEFAULT 0
);


ALTER TABLE globalstats OWNER TO wibo;

--
-- Name: type_message; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE type_message (
    id_type_m integer NOT NULL,
    typename character varying(255) NOT NULL
);


ALTER TABLE type_message OWNER TO wibo;

--
-- Name: message; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE message (
    id integer NOT NULL,
    content text NOT NULL,
    containerid integer NOT NULL,
    device_id integer,
    creationdate timestamp with time zone DEFAULT now()
)
INHERITS (type_message);


ALTER TABLE message OWNER TO wibo;

--
-- Name: message_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE message_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE message_id_seq OWNER TO wibo;

--
-- Name: message_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE message_id_seq OWNED BY message.id;


--
-- Name: reception; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE reception (
    id integer NOT NULL,
    receptiontime date NOT NULL,
    location_rc geography(Point,4326),
    idcontainer integer NOT NULL,
    device_id integer NOT NULL
);


ALTER TABLE reception OWNER TO wibo;

--
-- Name: reception_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE reception_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE reception_id_seq OWNER TO wibo;

--
-- Name: reception_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE reception_id_seq OWNED BY reception.id;


--
-- Name: type_information; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE type_information (
    id_type_info integer NOT NULL,
    name_info character varying(255) NOT NULL
);


ALTER TABLE type_information OWNER TO wibo;

--
-- Name: shared; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE shared (
    id integer NOT NULL,
    type_shared integer NOT NULL,
    device_id integer NOT NULL
)
INHERITS (type_information);


ALTER TABLE shared OWNER TO wibo;

--
-- Name: shared_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE shared_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE shared_id_seq OWNER TO wibo;

--
-- Name: shared_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE shared_id_seq OWNED BY shared.id;


--
-- Name: stats_container_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE stats_container_id_seq
    START WITH 21
    INCREMENT BY 3
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stats_container_id_seq OWNER TO wibo;

--
-- Name: stats_container; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE stats_container (
    idball_stats integer NOT NULL,
    num_km double precision,
    num_cath integer,
    num_follow integer,
    num_magnet integer,
    id_st integer DEFAULT nextval('stats_container_id_seq'::regclass) NOT NULL
);


ALTER TABLE stats_container OWNER TO wibo;

--
-- Name: stats_users; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE stats_users (
    num_owner integer DEFAULT 0,
    num_catch integer DEFAULT 0,
    num_follow integer DEFAULT 0,
    num_message integer DEFAULT 0,
    iduser_stats integer,
    id_stats integer NOT NULL,
    num_send integer DEFAULT 0
);


ALTER TABLE stats_users OWNER TO wibo;

--
-- Name: stats_users_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE stats_users_id_seq
    START WITH 29
    INCREMENT BY 12
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stats_users_id_seq OWNER TO wibo;

--
-- Name: stats_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE stats_users_id_seq OWNED BY stats_users.id_stats;


--
-- Name: type_group; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE type_group (
    id_type_g integer NOT NULL,
    groupname character varying(20) NOT NULL
);


ALTER TABLE type_group OWNER TO wibo;

--
-- Name: user; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE "user" (
    id_user integer NOT NULL,
    lastlogin date NOT NULL,
    creationdate date NOT NULL,
    mail character varying(510) DEFAULT make_uid() NOT NULL,
    passbyte bytea NOT NULL,
    location_user geography(Point,4326)
)
INHERITS (type_group);


ALTER TABLE "user" OWNER TO wibo;

--
-- Name: user_id_user_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE user_id_user_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE user_id_user_seq OWNER TO wibo;

--
-- Name: user_id_user_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE user_id_user_seq OWNED BY "user".id_user;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY checkpoints ALTER COLUMN id SET DEFAULT nextval('checkpoints_id_seq'::regclass);


--
-- Name: id_type_c; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY container ALTER COLUMN id_type_c SET DEFAULT 1;


--
-- Name: typename; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY container ALTER COLUMN typename SET DEFAULT 'red'::character varying;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY container ALTER COLUMN id SET DEFAULT nextval('container_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY device ALTER COLUMN id SET DEFAULT nextval('device_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY followed ALTER COLUMN id SET DEFAULT nextval('followed_id_seq'::regclass);


--
-- Name: id_type_m; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY message ALTER COLUMN id_type_m SET DEFAULT 1;


--
-- Name: typename; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY message ALTER COLUMN typename SET DEFAULT 'text'::character varying;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY message ALTER COLUMN id SET DEFAULT nextval('message_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY reception ALTER COLUMN id SET DEFAULT nextval('reception_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY shared ALTER COLUMN id SET DEFAULT nextval('shared_id_seq'::regclass);


--
-- Name: id_stats; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY stats_users ALTER COLUMN id_stats SET DEFAULT nextval('stats_users_id_seq'::regclass);


--
-- Name: id_user; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY "user" ALTER COLUMN id_user SET DEFAULT nextval('user_id_user_seq'::regclass);


--
-- Data for Name: checkpoints; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY checkpoints (id, date, containerid, attractbymagnet, location_ckp) FROM stdin;
\.


--
-- Name: checkpoints_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('checkpoints_id_seq', 1, false);


--
-- Data for Name: container; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY container (id_type_c, typename, id, direction, speed, location_ct, idcreator, titlename, ianix, creationdate, idcurrentuser) FROM stdin;
\.


--
-- Name: container_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('container_id_seq', 221, true);


--
-- Data for Name: device; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY device (id_type_d, typename, id, idclient, user_id_user, lastusemagnet) FROM stdin;
1	device_default	45	353450066919481	90	\N
1	device_default	46	355835065715559	91	\N
1	device_default	47	353450066919481	92	\N
1	device_default	48		93	\N
\.


--
-- Name: device_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('device_id_seq', 48, true);


--
-- Data for Name: followed; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY followed (id, container_id, device_id, iduser) FROM stdin;
\.


--
-- Name: followed_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('followed_id_seq', 1, true);


--
-- Data for Name: globalstats; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY globalstats (num_users, num_follow, num_message, num_send, num_cont) FROM stdin;
\.


--
-- Data for Name: message; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY message (id_type_m, typename, id, content, containerid, device_id, creationdate) FROM stdin;
\.


--
-- Name: message_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('message_id_seq', 919, true);


--
-- Data for Name: reception; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY reception (id, receptiontime, location_rc, idcontainer, device_id) FROM stdin;
\.


--
-- Name: reception_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('reception_id_seq', 1, false);


--
-- Data for Name: shared; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY shared (id_type_info, name_info, id, type_shared, device_id) FROM stdin;
\.


--
-- Name: shared_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('shared_id_seq', 1, false);


--
-- Data for Name: spatial_ref_sys; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY spatial_ref_sys (srid, auth_name, auth_srid, srtext, proj4text) FROM stdin;
\.


--
-- Data for Name: stats_container; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY stats_container (idball_stats, num_km, num_cath, num_follow, num_magnet, id_st) FROM stdin;
\.


--
-- Name: stats_container_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('stats_container_id_seq', 78, true);


--
-- Data for Name: stats_users; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY stats_users (num_owner, num_catch, num_follow, num_message, iduser_stats, id_stats, num_send) FROM stdin;
0	0	0	0	90	509	0
0	0	0	0	91	521	0
5	0	5	5	92	533	5
0	1	1	0	93	545	0
\.


--
-- Name: stats_users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('stats_users_id_seq', 557, true);


--
-- Data for Name: type_container; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY type_container (id_type_c, typename) FROM stdin;
\.


--
-- Data for Name: type_device; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY type_device (id_type_d, typename) FROM stdin;
\.


--
-- Data for Name: type_group; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY type_group (id_type_g, groupname) FROM stdin;
\.


--
-- Data for Name: type_information; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY type_information (id_type_info, name_info) FROM stdin;
\.


--
-- Data for Name: type_message; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY type_message (id_type_m, typename) FROM stdin;
\.


--
-- Data for Name: user; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY "user" (id_type_g, groupname, id_user, lastlogin, creationdate, mail, passbyte, location_user) FROM stdin;
2	user_default	90	0001-01-01	2015-10-31	0NdUh	\\x243261243135242f7a5776677862426c542f52793061463045485a6e75616a745754343778447933424a7734477a3255594c45452e53554139567453	0101000020E61000009A081B9E5E2940405C8FC2F5289C45C0
2	user_default	91	0001-01-01	2015-10-31	64Taib	\\x243261243135244a786e4e5050792e465951433461732f7a69704e412e537a73725a4f513955526e525155693745566c4d3069496c5a795632465943	0101000020E610000007B64AB0387C0240B360E28FA26A4840
2	user_default	92	0001-01-01	2015-10-31	bhLoB	\\x24326124313524367770644b35552e524e6c364f50694f73393241357559317a6b6d68515964376c4c585168734f7165536953513737716252595953	0101000020E610000007B64AB0387C0240B360E28FA26A4840
2	user_default	93	0001-01-01	2015-10-31	dTlGB	\\x24326124313524414f64773965496f4b5a66755839324a52786f737a2e324a417544337774494e4a345a4649535778444c4c38626c705573304a5769	0101000020E610000007B64AB0387C0240B360E28FA26A4840
\.


--
-- Name: user_id_user_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('user_id_user_seq', 93, true);


SET search_path = topology, pg_catalog;

--
-- Data for Name: topology; Type: TABLE DATA; Schema: topology; Owner: wibo
--

COPY topology (id, name, srid, "precision", hasz) FROM stdin;
\.


--
-- Data for Name: layer; Type: TABLE DATA; Schema: topology; Owner: wibo
--

COPY layer (topology_id, layer_id, schema_name, table_name, feature_column, feature_type, level, child_id) FROM stdin;
\.


SET search_path = public, pg_catalog;

--
-- Name: checkpoints_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY checkpoints
    ADD CONSTRAINT checkpoints_pk PRIMARY KEY (id);


--
-- Name: container_ianix_key; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY container
    ADD CONSTRAINT container_ianix_key UNIQUE (ianix);


--
-- Name: container_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY container
    ADD CONSTRAINT container_pk PRIMARY KEY (id);


--
-- Name: device_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY device
    ADD CONSTRAINT device_pk PRIMARY KEY (id);


--
-- Name: dist_iduser; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY stats_users
    ADD CONSTRAINT dist_iduser UNIQUE (iduser_stats);


--
-- Name: followed_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY followed
    ADD CONSTRAINT followed_pk PRIMARY KEY (id);


--
-- Name: message_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY message
    ADD CONSTRAINT message_pk PRIMARY KEY (id);


--
-- Name: reception_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY reception
    ADD CONSTRAINT reception_pk PRIMARY KEY (id);


--
-- Name: shared_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY shared
    ADD CONSTRAINT shared_pk PRIMARY KEY (id);


--
-- Name: st_user_id; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY stats_users
    ADD CONSTRAINT st_user_id PRIMARY KEY (id_stats);


--
-- Name: stats_container_idball_stats_key; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY stats_container
    ADD CONSTRAINT stats_container_idball_stats_key UNIQUE (idball_stats);


--
-- Name: stats_container_pkey; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY stats_container
    ADD CONSTRAINT stats_container_pkey PRIMARY KEY (id_st);


--
-- Name: type_container_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY type_container
    ADD CONSTRAINT type_container_pk PRIMARY KEY (id_type_c);


--
-- Name: type_device_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY type_device
    ADD CONSTRAINT type_device_pk PRIMARY KEY (id_type_d);


--
-- Name: type_group_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY type_group
    ADD CONSTRAINT type_group_pk PRIMARY KEY (id_type_g);


--
-- Name: type_information_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY type_information
    ADD CONSTRAINT type_information_pk PRIMARY KEY (id_type_info);


--
-- Name: type_message_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY type_message
    ADD CONSTRAINT type_message_pk PRIMARY KEY (id_type_m);


--
-- Name: user_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY "user"
    ADD CONSTRAINT user_pk PRIMARY KEY (id_user);


--
-- Name: checkpoints_container_id_idx; Type: INDEX; Schema: public; Owner: wibo; Tablespace: 
--

CREATE INDEX checkpoints_container_id_idx ON checkpoints USING btree (containerid, date);


--
-- Name: constraint_mail; Type: INDEX; Schema: public; Owner: wibo; Tablespace: 
--

CREATE UNIQUE INDEX constraint_mail ON "user" USING btree (mail);


--
-- Name: message_idx_container; Type: INDEX; Schema: public; Owner: wibo; Tablespace: 
--

CREATE INDEX message_idx_container ON message USING btree (containerid);


--
-- Name: stats_container; Type: TRIGGER; Schema: public; Owner: wibo
--

CREATE TRIGGER stats_container AFTER INSERT ON container FOR EACH ROW EXECUTE PROCEDURE create_statsballon();


--
-- Name: stats_users; Type: TRIGGER; Schema: public; Owner: wibo
--

CREATE TRIGGER stats_users AFTER INSERT ON "user" FOR EACH ROW EXECUTE PROCEDURE create_statsuser();


--
-- Name: checkpoints_container; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY checkpoints
    ADD CONSTRAINT checkpoints_container FOREIGN KEY (containerid) REFERENCES container(id);


--
-- Name: container_user; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY container
    ADD CONSTRAINT container_user FOREIGN KEY (idcreator) REFERENCES "user"(id_user);


--
-- Name: device_user; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY device
    ADD CONSTRAINT device_user FOREIGN KEY (user_id_user) REFERENCES "user"(id_user);


--
-- Name: followed_container; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY followed
    ADD CONSTRAINT followed_container FOREIGN KEY (container_id) REFERENCES container(id);


--
-- Name: followed_device; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY followed
    ADD CONSTRAINT followed_device FOREIGN KEY (device_id) REFERENCES device(id);


--
-- Name: message_container; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY message
    ADD CONSTRAINT message_container FOREIGN KEY (containerid) REFERENCES container(id);


--
-- Name: message_device; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY message
    ADD CONSTRAINT message_device FOREIGN KEY (device_id) REFERENCES device(id);


--
-- Name: reception_device; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY reception
    ADD CONSTRAINT reception_device FOREIGN KEY (device_id) REFERENCES device(id);


--
-- Name: shared_device; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY shared
    ADD CONSTRAINT shared_device FOREIGN KEY (device_id) REFERENCES device(id);


--
-- Name: stats_id_container; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY stats_container
    ADD CONSTRAINT stats_id_container FOREIGN KEY (idball_stats) REFERENCES container(id);


--
-- Name: stats_users_user; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY stats_users
    ADD CONSTRAINT stats_users_user FOREIGN KEY (iduser_stats) REFERENCES "user"(id_user);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

