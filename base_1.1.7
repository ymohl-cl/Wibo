--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: topology; Type: SCHEMA; Schema: -; Owner: wibo
--

CREATE SCHEMA topology;


ALTER SCHEMA topology OWNER TO wibo;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry, geography, and raster spatial types and functions';


--
-- Name: postgis_topology; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis_topology WITH SCHEMA topology;


--
-- Name: EXTENSION postgis_topology; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis_topology IS 'PostGIS topology spatial types and functions';


SET search_path = public, pg_catalog;

--
-- Name: create_statsballon(); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION create_statsballon() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        --
        -- Create a row in stats_container to reflect the operation performed on container,
        -- make use of the special variable TG_OP to work out the operation.
        --
       
        IF (TG_OP = 'INSERT') THEN
            INSERT INTO stats_container VAlUES (NEW.id, 0, 0, 0, 0);
            RETURN NEW;
        END IF;
        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$$;


ALTER FUNCTION public.create_statsballon() OWNER TO wibo;

--
-- Name: create_statsuser(); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION create_statsuser() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        --
        -- Create a row in stats_users to reflect the operation performed on user,
        -- make use of the special variable TG_OP to work out the operation.
        --
       
        IF (TG_OP = 'INSERT') THEN
            INSERT INTO stats_users VAlUES (0, 0, 0, 0, NEW.id_user);
            RETURN NEW;
        END IF;
        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$$;


ALTER FUNCTION public.create_statsuser() OWNER TO wibo;

--
-- Name: getalldevices(); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION getalldevices() RETURNS TABLE(deviceid integer, userid integer)
    LANGUAGE plpgsql
    AS $$ BEGIN RETURN QUERY EXECUTE 'SELECT device.id AS DeviceId, device.user_id_user AS UserId, FROM device LEFT OUTER JOIN "user" ON (device.user_id_user = "user".id_user)'; END  $$;


ALTER FUNCTION public.getalldevices() OWNER TO wibo;

--
-- Name: getcontainers(); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION getcontainers() RETURNS TABLE(idballon integer, idtype integer, direction numeric, speedcont integer, creationdate date, locationcont text)
    LANGUAGE plpgsql
    AS $$ 
 BEGIN  RETURN  QUERY EXECUTE 'SELECT  container.id AS contIndex, container.id_type_c AS TypeCode, container.direction AS contDirection, container.speed AS contSpeed, container.creationdate as dateCreationCon, ST_AsText(container.location_ct) FROM container';  END$$;


ALTER FUNCTION public.getcontainers() OWNER TO wibo;

--
-- Name: getcontainersbyuserid(integer); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION getcontainersbyuserid(iduser integer) RETURNS TABLE(idballon integer, titlename character varying, idtype integer, direction double precision, speedcont double precision, creationdate timestamp without time zone, locationcont text, ianix integer)
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY SELECT container.id AS contIndex, container.titlename AS TitleName, container.id_type_c AS TypeCode, container.direction AS contDirection, container.speed AS contSpeed, date(container.creationdate) + interval '1 hour',   ST_AsText(container.location_ct), container.ianix FROM container  WHERE idcreator = iduser;  END $$;


ALTER FUNCTION public.getcontainersbyuserid(iduser integer) OWNER TO wibo;

--
-- Name: getcontainersbyuseridjson(integer); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION getcontainersbyuseridjson(iduser integer) RETURNS TABLE(idballon integer, titlename character varying, idtype integer, direction numeric, speedcont integer, creationdate date, locationcont text)
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY SELECT container.id AS contIndex, container.titlename AS TitleName, container.id_type_c AS TypeCode, container.direction AS contDirection, container.speed AS contSpeed, container.creationdate as dateCreationCon,  ST_AsGeoJson(container.location_ct)  FROM container  WHERE idcreator = iduser;  END $$;


ALTER FUNCTION public.getcontainersbyuseridjson(iduser integer) OWNER TO wibo;

--
-- Name: getcontainersjson(); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION getcontainersjson() RETURNS TABLE(idballon integer, idtype integer, direction numeric, speedcont integer, creationdate date, locationcont text)
    LANGUAGE plpgsql
    AS $$ 
 BEGIN  RETURN  QUERY EXECUTE 'SELECT  container.id AS contIndex, container.id_type_c AS TypeCode, container.direction AS contDirection, container.speed AS contSpeed, container.creationdate as dateCreationCon, ST_AsGeoJson(container.location_ct) FROM container';  END$$;


ALTER FUNCTION public.getcontainersjson() OWNER TO wibo;

--
-- Name: getdevicesbyuserid(integer); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION getdevicesbyuserid(iduser integer) RETURNS TABLE(idclientdevice character varying)
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY SELECT  device.idclient AS IdClientDevice FROM device WHERE user_id_user = iduser; END  $$;


ALTER FUNCTION public.getdevicesbyuserid(iduser integer) OWNER TO wibo;

--
-- Name: insertballonwork(character varying, double precision, double precision, character varying, character varying); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION insertballonwork(titlep character varying, latitudec double precision, longitudec double precision, mss character varying, lien character varying) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY INSERT INTO ballonwork (title, message, location_wk, link) VALUES(titlep, mss, ST_SetSRID(ST_MakePoint(latitudec, longitudec), 4326), lien) RETURNING idbw;  END; $$;


ALTER FUNCTION public.insertballonwork(titlep character varying, latitudec double precision, longitudec double precision, mss character varying, lien character varying) OWNER TO wibo;

--
-- Name: insertcheckpoints(date, double precision, double precision, integer, boolean); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION insertcheckpoints(cdate date, latitudec double precision, longitudec double precision, idcont integer, magnet boolean) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY INSERT INTO checkpoints (date, containerid, attractbymagnet, location_ckp) VALUES(cdte, idcont, magnet, ST_SetSRID(ST_MakePoint(latitudec, longitudec), 4326)) RETURNING id;  END; $$;


ALTER FUNCTION public.insertcheckpoints(cdate date, latitudec double precision, longitudec double precision, idcont integer, magnet boolean) OWNER TO wibo;

--
-- Name: insertcontainer(integer, double precision, double precision, double precision, double precision, text, integer, date); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION insertcontainer(idcreatorc integer, latitudec double precision, longitudec double precision, directionc double precision, speedc double precision, title text, idx integer, creation date) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY INSERT INTO container (direction, speed, location_ct, idcreator, titlename, ianix, creationdate) VALUES(directionc, speedc , ST_SetSRID(ST_MakePoint(latitudec, longitudec), 4326), idcreatorc, title, idx, creation) RETURNING id;  END; $$;


ALTER FUNCTION public.insertcontainer(idcreatorc integer, latitudec double precision, longitudec double precision, directionc double precision, speedc double precision, title text, idx integer, creation date) OWNER TO wibo;

--
-- Name: login(integer, bytea); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION login(_userid integer, _pwd bytea) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
done boolean:= false;
BEGIN
UPDATE "user" SET tempass =_pwd WHERE id_user=_userid;
 SELECT TRUE  into done  FROM "user" WHERE  id_user=_userid  AND passbyte::text IS NOT DISTINCT FROM tempass::text;
IF done = true THEN
    RETURN TRUE; ELSE RETURN FALSE;
END IF;
RETURN FALSE;
END;
$$;


ALTER FUNCTION public.login(_userid integer, _pwd bytea) OWNER TO wibo;

--
-- Name: login2(integer, text); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION login2(_userid integer, _pwd text, OUT _email text) RETURNS text
    LANGUAGE plpgsql
    AS $$
BEGIN
SELECT mail INTO _email FROM "user"
    WHERE "user".iduser=_userid
AND passbyte = _pwd;
END;
$$;


ALTER FUNCTION public.login2(_userid integer, _pwd text, OUT _email text) OWNER TO wibo;

--
-- Name: login3(integer, bytea); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION login3(_userid integer, _pwd bytea, OUT _email text) RETURNS text
    LANGUAGE plpgsql
    AS $$
BEGIN
SELECT mail INTO _email FROM "user"
    WHERE "user".id_user=_userid
AND passbyte = _pwd;
END;
$$;


ALTER FUNCTION public.login3(_userid integer, _pwd bytea, OUT _email text) OWNER TO wibo;

--
-- Name: login_insert(integer, character varying); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION login_insert(_userid integer, _pwd character varying, OUT _res boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN 
update "user" set tempass =_pwd where id_user=_userid;
SELECT true INTO _res FROM "user"
WHERE "user".id_user=_userid
AND "user".passbyte = "user".tempass;
END;
$$;


ALTER FUNCTION public.login_insert(_userid integer, _pwd character varying, OUT _res boolean) OWNER TO wibo;

--
-- Name: make_uid(); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION make_uid() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
    new_uid text;
done bool;
BEGIN
    done := false;
    WHILE NOT done LOOP new_uid := stringify_bigint(pseudo_encrypt(cast(extract(epoch from now())::integer as int)));
done := NOT exists(SELECT 1 FROM "user" WHERE mail=new_uid);
END LOOP;
    RETURN new_uid;
END;
$$;


ALTER FUNCTION public.make_uid() OWNER TO wibo;

--
-- Name: pseudo_encrypt(integer); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION pseudo_encrypt(value integer) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
l1 int;
l2 int;
r1 int;
r2 int;
i int:=0;
BEGIN
 l1:= (VALUE >> 16) & 65535;
 r1:= VALUE & 65535;
 WHILE i < 3 LOOP
   l2 := r1;
   r2 := l1 # ((((1366 * r1 + 150889) % 714021) / 714021.0) * 32767)::int;
   l1 := l2;
   r1 := r2;
   i := i + 1;
 END LOOP;
 RETURN ((r1 << 16) + l1);
END;
$$;


ALTER FUNCTION public.pseudo_encrypt(value integer) OWNER TO wibo;

--
-- Name: setsdefaultuserdata(double precision, double precision, date, date, bytea); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION setsdefaultuserdata(latc double precision, lonc double precision, lastlog date, creation date, pass bytea) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
done boolean:= false;
BEGIN
IF done = false THEN
    INSERT INTO "user"(id_type_g, groupname, passbyte, lastlogin, creationdate, mail, location_user) VALUES(2, 'user_default', pass, lastlog, creation, make_uid(), ST_SetSRID(ST_MakePoint(latc, lonc), 4326));
    RETURN (SELECT currval('user_id_user_seq'));
END IF;
RETURN -1;
END;
$$;


ALTER FUNCTION public.setsdefaultuserdata(latc double precision, lonc double precision, lastlog date, creation date, pass bytea) OWNER TO wibo;

--
-- Name: setstatballon(double precision, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION setstatballon(n_km double precision, n_cath integer, n_follow integer, n_magnet integer, idball integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
done boolean:= false;
BEGIN
 done :=  NOT exists(SELECT idball_stats FROM stats_container WHERE idball_stats=idball);
IF done = false THEN
    UPDATE stats_container SET(num_km, num_cath, num_follow, num_magnet) = ($1, $2, $3, $4) WHERE idball_stats=idball;
    RETURN TRUE;
END IF;
PERFORM 1 FROM stats_container WHERE idball_stats=idball LIMIT 1;
IF NOT FOUND THEN 
INSERT INTO stats_container(num_km, num_cath, num_follow, num_magnet, idball_stats) VALUES(n_km, n_cath, n_follow, n_magnet, idball);
RETURN TRUE;
END IF;
RETURN FALSE;
END;
$_$;


ALTER FUNCTION public.setstatballon(n_km double precision, n_cath integer, n_follow integer, n_magnet integer, idball integer) OWNER TO wibo;

--
-- Name: setstatsuser(integer, integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION setstatsuser(n_cont integer, n_catch integer, n_follow integer, n_message integer, n_send integer, iduser integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
done boolean:= false;
BEGIN
 done :=  NOT exists(SELECT iduser_stats FROM stats_users WHERE iduser_stats=iduser);
IF done = false THEN
    UPDATE stats_users SET(num_owner, num_catch, num_follow, num_message, num_send) = ($1, $2, $3, $4, $5) WHERE iduser_stats=iduser;
    RETURN TRUE;
END IF;
PERFORM 1 FROM stats_users WHERE iduser_stats=iduser LIMIT 1;
IF NOT FOUND THEN 
INSERT INTO stats_users(num_owner, num_catch, num_follow, num_message, num_send, iduser_stats) VALUES(n_cont, n_catch, n_follow, n_message, n_send, iduser);
RETURN TRUE;
END IF;
RETURN FALSE;
END;
$_$;


ALTER FUNCTION public.setstatsuser(n_cont integer, n_catch integer, n_follow integer, n_message integer, n_send integer, iduser integer) OWNER TO wibo;

--
-- Name: setsuserdata(integer, character varying, double precision, double precision, date, date, character varying, bytea); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION setsuserdata(idtypeg integer, groupnamec character varying, latc double precision, lonc double precision, creation date, lastlog date, mailc character varying, pass bytea) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
done boolean:= false;
BEGIN
 done :=  NOT exists(SELECT mail FROM "user");
IF done = true THEN
    INSERT INTO "user"(id_type_g, groupname, lastlogin, creationdate, mail, passbyte, location_user) VALUES(idtypeg, groupnamec, lastlog, creation, mailc, pass, ST_SetSRID(ST_MakePoint(latc, lonc), 4326));
    RETURN TRUE;
END IF;
PERFORM 1 FROM "user" WHERE mail=mailc LIMIT 1;
IF FOUND THEN
UPDATE "user" SET(lastlogin, location_user) = (lastlog, ST_SetSRID(ST_MakePoint(latc, lonc), 4326)) WHERE mail = mailc;
RETURN TRUE;
END IF;
RETURN FALSE;
END;
$$;


ALTER FUNCTION public.setsuserdata(idtypeg integer, groupnamec character varying, latc double precision, lonc double precision, creation date, lastlog date, mailc character varying, pass bytea) OWNER TO wibo;

--
-- Name: setsuserdata2(integer, character varying, double precision, double precision, date, date, character varying, bytea); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION setsuserdata2(idtypeg integer, groupnamec character varying, latc double precision, lonc double precision, creation date, lastlog date, mailc character varying, pass bytea) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
done boolean:= false;
iduser integer := 0;
BEGIN
 done :=  NOT exists(SELECT mail FROM "user");
IF done = false THEN
    INSERT INTO "user"(id_type_g, groupname, lastlogin, creationdate, mail, passbyte, location_user) VALUES(idtypeg, groupnamec, lastlog, creation, mailc, pass, ST_SetSRID(ST_MakePoint(latc, lonc), 4326));
    RETURN (SELECT currval('user_id_user_seq'));

END IF;
PERFORM 1 FROM "user" WHERE mail=mailc LIMIT 1;
IF FOUND THEN
 UPDATE "user" SET(lastlogin, location_user) = (lastlog, ST_SetSRID(ST_MakePoint(latc, lonc), 4326)) WHERE mail=mailc;
RETURN (SELECT id_user FROM "user" WHERE mail=mailc);
END IF;
RETURN -1;
END;
$$;


ALTER FUNCTION public.setsuserdata2(idtypeg integer, groupnamec character varying, latc double precision, lonc double precision, creation date, lastlog date, mailc character varying, pass bytea) OWNER TO wibo;

--
-- Name: stringify_bigint(bigint); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION stringify_bigint(n bigint) RETURNS text
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
 alphabet text:='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
 base int:=length(alphabet); 
 _n bigint:=abs(n);
 output text:='';
BEGIN
 LOOP
   output := output || substr(alphabet, 1+(_n%base)::int, 1);
   _n := _n / base; 
   EXIT WHEN _n=0;
 END LOOP;
 RETURN output;
END $$;


ALTER FUNCTION public.stringify_bigint(n bigint) OWNER TO wibo;

--
-- Name: updatelocationuser(integer, double precision, double precision); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION updatelocationuser(iduser integer, latitudec double precision, longitudec double precision) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY UPDATE "user" SET location_user = ST_SetSRID(ST_MakePoint(latitudec, longitudec), 4326) WHERE id_user = iduser RETURNING id_user;  END; $$;


ALTER FUNCTION public.updatelocationuser(iduser integer, latitudec double precision, longitudec double precision) OWNER TO wibo;

--
-- Name: updateuser(integer, double precision, double precision, date); Type: FUNCTION; Schema: public; Owner: wibo
--

CREATE FUNCTION updateuser(iduser integer, latitudec double precision, longitudec double precision, log date) RETURNS SETOF integer
    LANGUAGE plpgsql
    AS $$  BEGIN RETURN QUERY UPDATE "user" SET location_user = ST_SetSRID(ST_MakePoint(latitudec, longitudec), 4326), lastlogin = log WHERE id_user = iduser RETURNING id_user;  END; $$;


ALTER FUNCTION public.updateuser(iduser integer, latitudec double precision, longitudec double precision, log date) OWNER TO wibo;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: ballonwork; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE ballonwork (
    idbw integer NOT NULL,
    title character varying(250) NOT NULL,
    message character varying(510) NOT NULL,
    location_wk geography(Point,4326),
    link character varying(240) NOT NULL
);


ALTER TABLE ballonwork OWNER TO wibo;

--
-- Name: ballonwork_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE ballonwork_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ballonwork_id_seq OWNER TO wibo;

--
-- Name: ballonwork_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE ballonwork_id_seq OWNED BY ballonwork.idbw;


--
-- Name: checkpoints; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE checkpoints (
    id integer NOT NULL,
    date date NOT NULL,
    containerid integer NOT NULL,
    attractbymagnet boolean NOT NULL,
    location_ckp geography(Point,4326)
);


ALTER TABLE checkpoints OWNER TO wibo;

--
-- Name: checkpoints_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE checkpoints_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE checkpoints_id_seq OWNER TO wibo;

--
-- Name: checkpoints_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE checkpoints_id_seq OWNED BY checkpoints.id;


--
-- Name: type_container; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE type_container (
    id_type_c integer NOT NULL,
    typename character varying(255) NOT NULL
);


ALTER TABLE type_container OWNER TO wibo;

--
-- Name: container; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE container (
    id integer NOT NULL,
    direction double precision NOT NULL,
    speed double precision NOT NULL,
    location_ct geography(Point,4326),
    idcreator integer,
    titlename character varying(255),
    ianix integer,
    creationdate timestamp with time zone DEFAULT now(),
    idcurrentuser integer DEFAULT 0
)
INHERITS (type_container);


ALTER TABLE container OWNER TO wibo;

--
-- Name: container_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE container_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE container_id_seq OWNER TO wibo;

--
-- Name: container_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE container_id_seq OWNED BY container.id;


--
-- Name: type_device; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE type_device (
    id_type_d integer NOT NULL,
    typename character varying(255) NOT NULL
);


ALTER TABLE type_device OWNER TO wibo;

--
-- Name: device; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE device (
    id integer NOT NULL,
    idclient character varying(40) NOT NULL,
    user_id_user integer NOT NULL,
    lastusemagnet date
)
INHERITS (type_device);


ALTER TABLE device OWNER TO wibo;

--
-- Name: device_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE device_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE device_id_seq OWNER TO wibo;

--
-- Name: device_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE device_id_seq OWNED BY device.id;


--
-- Name: done; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE done (
    bool boolean
);


ALTER TABLE done OWNER TO wibo;

--
-- Name: done2; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE done2 (
    bool boolean
);


ALTER TABLE done2 OWNER TO wibo;

--
-- Name: followed; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE followed (
    id integer NOT NULL,
    container_id integer NOT NULL,
    device_id integer,
    iduser integer
);


ALTER TABLE followed OWNER TO wibo;

--
-- Name: followed_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE followed_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE followed_id_seq OWNER TO wibo;

--
-- Name: followed_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE followed_id_seq OWNED BY followed.id;


--
-- Name: globalstats; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE globalstats (
    num_users integer,
    num_follow integer DEFAULT 0,
    num_message integer DEFAULT 0,
    num_send integer DEFAULT 0,
    num_cont integer DEFAULT 0
);


ALTER TABLE globalstats OWNER TO wibo;

--
-- Name: type_message; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE type_message (
    id_type_m integer NOT NULL,
    typename character varying(255) NOT NULL
);


ALTER TABLE type_message OWNER TO wibo;

--
-- Name: message; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE message (
    id integer NOT NULL,
    content text NOT NULL,
    containerid integer NOT NULL,
    device_id integer,
    creationdate timestamp with time zone DEFAULT now()
)
INHERITS (type_message);


ALTER TABLE message OWNER TO wibo;

--
-- Name: message_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE message_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE message_id_seq OWNER TO wibo;

--
-- Name: message_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE message_id_seq OWNED BY message.id;


--
-- Name: reception; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE reception (
    id integer NOT NULL,
    receptiontime date NOT NULL,
    location_rc geography(Point,4326),
    idcontainer integer NOT NULL,
    device_id integer NOT NULL
);


ALTER TABLE reception OWNER TO wibo;

--
-- Name: reception_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE reception_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE reception_id_seq OWNER TO wibo;

--
-- Name: reception_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE reception_id_seq OWNED BY reception.id;


--
-- Name: type_information; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE type_information (
    id_type_info integer NOT NULL,
    name_info character varying(255) NOT NULL
);


ALTER TABLE type_information OWNER TO wibo;

--
-- Name: shared; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE shared (
    id integer NOT NULL,
    type_shared integer NOT NULL,
    device_id integer NOT NULL
)
INHERITS (type_information);


ALTER TABLE shared OWNER TO wibo;

--
-- Name: shared_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE shared_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE shared_id_seq OWNER TO wibo;

--
-- Name: shared_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE shared_id_seq OWNED BY shared.id;


--
-- Name: stats_container_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE stats_container_id_seq
    START WITH 21
    INCREMENT BY 3
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stats_container_id_seq OWNER TO wibo;

--
-- Name: stats_container; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE stats_container (
    idball_stats integer NOT NULL,
    num_km double precision,
    num_cath integer,
    num_follow integer,
    num_magnet integer,
    id_st integer DEFAULT nextval('stats_container_id_seq'::regclass) NOT NULL
);


ALTER TABLE stats_container OWNER TO wibo;

--
-- Name: stats_users; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE stats_users (
    num_owner integer DEFAULT 0,
    num_catch integer DEFAULT 0,
    num_follow integer DEFAULT 0,
    num_message integer DEFAULT 0,
    iduser_stats integer,
    id_stats integer NOT NULL,
    num_send integer DEFAULT 0
);


ALTER TABLE stats_users OWNER TO wibo;

--
-- Name: stats_users_id_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE stats_users_id_seq
    START WITH 29
    INCREMENT BY 12
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stats_users_id_seq OWNER TO wibo;

--
-- Name: stats_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE stats_users_id_seq OWNED BY stats_users.id_stats;


--
-- Name: type_group; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE type_group (
    id_type_g integer NOT NULL,
    groupname character varying(20) NOT NULL
);


ALTER TABLE type_group OWNER TO wibo;

--
-- Name: user; Type: TABLE; Schema: public; Owner: wibo; Tablespace: 
--

CREATE TABLE "user" (
    id_user integer NOT NULL,
    lastlogin date NOT NULL,
    creationdate date NOT NULL,
    mail character varying(510) DEFAULT make_uid() NOT NULL,
    location_user geography(Point,4326),
    tempass bytea,
    passbyte bytea NOT NULL
)
INHERITS (type_group);


ALTER TABLE "user" OWNER TO wibo;

--
-- Name: user_id_user_seq; Type: SEQUENCE; Schema: public; Owner: wibo
--

CREATE SEQUENCE user_id_user_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE user_id_user_seq OWNER TO wibo;

--
-- Name: user_id_user_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: wibo
--

ALTER SEQUENCE user_id_user_seq OWNED BY "user".id_user;


--
-- Name: idbw; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY ballonwork ALTER COLUMN idbw SET DEFAULT nextval('ballonwork_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY checkpoints ALTER COLUMN id SET DEFAULT nextval('checkpoints_id_seq'::regclass);


--
-- Name: id_type_c; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY container ALTER COLUMN id_type_c SET DEFAULT 1;


--
-- Name: typename; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY container ALTER COLUMN typename SET DEFAULT 'red'::character varying;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY container ALTER COLUMN id SET DEFAULT nextval('container_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY device ALTER COLUMN id SET DEFAULT nextval('device_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY followed ALTER COLUMN id SET DEFAULT nextval('followed_id_seq'::regclass);


--
-- Name: id_type_m; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY message ALTER COLUMN id_type_m SET DEFAULT 1;


--
-- Name: typename; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY message ALTER COLUMN typename SET DEFAULT 'text'::character varying;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY message ALTER COLUMN id SET DEFAULT nextval('message_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY reception ALTER COLUMN id SET DEFAULT nextval('reception_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY shared ALTER COLUMN id SET DEFAULT nextval('shared_id_seq'::regclass);


--
-- Name: id_stats; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY stats_users ALTER COLUMN id_stats SET DEFAULT nextval('stats_users_id_seq'::regclass);


--
-- Name: id_user; Type: DEFAULT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY "user" ALTER COLUMN id_user SET DEFAULT nextval('user_id_user_seq'::regclass);


--
-- Data for Name: ballonwork; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY ballonwork (idbw, title, message, location_wk, link) FROM stdin;
6	test	mensaje	0101000020E6100000C0CCCCCCCC0C52406866666666E642C0	ulrada.com
7	test	mensaje	0101000020E6100000C0CCCCCCCC0C52406866666666E642C0	ulrada.com
8	test	mensaje	0101000020E6100000C0CCCCCCCC0C52406866666666E642C0	ulrada.com
\.


--
-- Name: ballonwork_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('ballonwork_id_seq', 8, true);


--
-- Data for Name: checkpoints; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY checkpoints (id, date, containerid, attractbymagnet, location_ckp) FROM stdin;
\.


--
-- Name: checkpoints_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('checkpoints_id_seq', 1, false);


--
-- Data for Name: container; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY container (id_type_c, typename, id, direction, speed, location_ct, idcreator, titlename, ianix, creationdate, idcurrentuser) FROM stdin;
\.


--
-- Name: container_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('container_id_seq', 249, true);


--
-- Data for Name: device; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY device (id_type_d, typename, id, idclient, user_id_user, lastusemagnet) FROM stdin;
1	device_default	127	ffffffff-c6fe-db9f-ffff-fffffbfabffb	339	\N
1	device_default	128	ffffffff-93fb-37c7-0000-000000000000	341	\N
1	device_default	129	ffffffff-c6fe-db9f-ffff-fffffbfabffb	343	\N
1	device_default	130	353450066919481	347	\N
\.


--
-- Name: device_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('device_id_seq', 130, true);


--
-- Data for Name: done; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY done (bool) FROM stdin;
\.


--
-- Data for Name: done2; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY done2 (bool) FROM stdin;
\.


--
-- Data for Name: followed; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY followed (id, container_id, device_id, iduser) FROM stdin;
\.


--
-- Name: followed_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('followed_id_seq', 1, true);


--
-- Data for Name: globalstats; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY globalstats (num_users, num_follow, num_message, num_send, num_cont) FROM stdin;
\.


--
-- Data for Name: message; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY message (id_type_m, typename, id, content, containerid, device_id, creationdate) FROM stdin;
\.


--
-- Name: message_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('message_id_seq', 1729, true);


--
-- Data for Name: reception; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY reception (id, receptiontime, location_rc, idcontainer, device_id) FROM stdin;
\.


--
-- Name: reception_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('reception_id_seq', 1, false);


--
-- Data for Name: shared; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY shared (id_type_info, name_info, id, type_shared, device_id) FROM stdin;
\.


--
-- Name: shared_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('shared_id_seq', 1, false);


--
-- Data for Name: spatial_ref_sys; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY spatial_ref_sys (srid, auth_name, auth_srid, srtext, proj4text) FROM stdin;
\.


--
-- Data for Name: stats_container; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY stats_container (idball_stats, num_km, num_cath, num_follow, num_magnet, id_st) FROM stdin;
\.


--
-- Name: stats_container_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('stats_container_id_seq', 429, true);


--
-- Data for Name: stats_users; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY stats_users (num_owner, num_catch, num_follow, num_message, iduser_stats, id_stats, num_send) FROM stdin;
0	0	0	0	346	3221	0
0	0	0	0	357	3305	0
0	0	0	0	339	3137	0
0	0	0	0	341	3161	0
0	0	0	0	344	3197	0
0	0	0	0	343	3185	0
0	0	0	0	347	3233	0
0	0	0	0	355	3293	0
0	0	0	0	342	3173	0
0	0	0	0	353	3281	0
0	0	0	0	352	3269	0
0	0	0	0	350	3257	0
0	0	0	0	348	3245	0
0	0	0	0	345	3209	0
0	0	0	0	340	3149	0
\.


--
-- Name: stats_users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('stats_users_id_seq', 3305, true);


--
-- Data for Name: type_container; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY type_container (id_type_c, typename) FROM stdin;
\.


--
-- Data for Name: type_device; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY type_device (id_type_d, typename) FROM stdin;
\.


--
-- Data for Name: type_group; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY type_group (id_type_g, groupname) FROM stdin;
\.


--
-- Data for Name: type_information; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY type_information (id_type_info, name_info) FROM stdin;
\.


--
-- Data for Name: type_message; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY type_message (id_type_m, typename) FROM stdin;
\.


--
-- Data for Name: user; Type: TABLE DATA; Schema: public; Owner: wibo
--

COPY "user" (id_type_g, groupname, id_user, lastlogin, creationdate, mail, location_user, tempass, passbyte) FROM stdin;
1	user_particulier	346	2015-11-05	2015-11-05	c@c.c	0101000020E6100000B1A0D56E6097024032337DC04D714840	\\x0db65b4e3bce49b33f83d7e899bb03049646c0c0929f1c062aa48bf8995992fbb2331c9318366e0fe766db98438fd9a93bf9716949933929b88866271651fe9b	\\xc76806f9dcce989fb063d50b19d80ef925e3a5a95b6eaceed14932d00787c40041579803f3e1b23269bcbd1d91a6079c6e16e9e9cb5fd3753272f087a48eb9ba
1	user_particulier	340	0001-01-01	2015-11-05	a@a.a	0101000020E6100000E565A8E5629702405B28F4554D714840	\\x5eabc64daab913063da61e2a7c4d91be31a19df605f520167f85983fb5609284e3892efe939e3540410551aa120b114da137a4dd4ecc35a9b6364c814af4fbd4	\\xbe8ea25ab2fb8bb9b75c2169da5e2da4c5276d31787bfe361352e8bc0c189c982a88cae3a62fd2f59ebfdcd63263ebd085f56a658eb0ee6fe4a0f6fbc9bad933
1	user_particulier	342	0001-01-01	2015-11-05	t@t.t	0101000020E61000008FC536A968744840F45F3134E8A50240	\\xa5c31faa4dd85a6050dcaece28f587141e0ba2a063164c583a71252c1326198ff830434218c8ff8d5b9f66054ac622da10d460fadd56e49fde4c0a491dd691f2	\\xfe49b8e98fe03f9937f744b52cfe336f0095dfaed1cf4bee147e7a9c138463f09cb9e6b9250527a3b1b274d0a97d60f84fb59d3f23a7f80c4fe7f9f95783b3ff
1	user_particulier	357	2015-11-06	2015-11-06	b@b.b	0101000020E6100000EFA2F9ADE7A5024007A0AC7367744840	\\x20d66969e90a65b5507ca5f2b7b88b7014f42ff8fca0b53d968fb6da0b41523f14ad52eebc5f0b634adc41077ce52d29891353b64c61986ce3e037c49f94fd42	\\x20d66969e90a65b5507ca5f2b7b88b7014f42ff8fca0b53d968fb6da0b41523f14ad52eebc5f0b634adc41077ce52d29891353b64c61986ce3e037c49f94fd42
2	user_default	339	0001-01-01	2015-11-05	Qnj21b	0101000020E610000007B64AB0387C0240B360E28FA26A4840	\N	\\x31
2	user_default	341	0001-01-01	2015-11-05	wlWUhc	0101000020E610000007B64AB0387C0240B360E28FA26A4840	\N	\\x31
1	user_particulier	344	0001-01-01	2015-11-05	p@p.p	0101000020E6100000E4C3471F4E714840887258D06A970240	\\x2c624cafb4bfbdbb3e7da6c40f6bc6c733b920e183bd3ce13c833a666ab1ba7c6e1c9ffc381ce83678cb50e762a9ddb3243702244b249a98b0e85e506eae261e	\\x2c624cafb4bfbdbb3e7da6c40f6bc6c733b920e183bd3ce13c833a666ab1ba7c6e1c9ffc381ce83678cb50e762a9ddb3243702244b249a98b0e85e506eae261e
2	user_default	343	0001-01-01	2015-11-05	LZdYJb	0101000020E6100000B360E28FA26A484007B64AB0387C0240	\\xfe49b8e98fe03f9937f744b52cfe336f0095dfaed1cf4bee147e7a9c138463f09cb9e6b9250527a3b1b274d0a97d60f84fb59d3f23a7f80c4fe7f9f95783b3ff	\\x31
2	user_default	347	0001-01-01	2015-11-05	SMWs6b	0101000020E610000007B64AB0387C0240B360E28FA26A4840	\N	\\x31
1	user_particulier	355	0001-01-01	2015-11-06	g@g.g	0101000020E61000002429E96168744840EA2285B2F0A50240	\N	\\x6766bbcedbc9c75cf9ee0afd42cf290e9449d081effddebfe4293601ae2dbab765a57048782fe57cdc3dd6b942db3ae44ecbb9d974db54dfe6dcd2da196833d2
1	user_particulier	353	0001-01-01	2015-11-06	huh@huh.m	0101000020E6100000CC6E7720FCA502401E0A552069744840	\N	\\x9a8961651c82cf2f6fc73282a2d46fb65e652ec3f024416cec1287b6a47b884e6ac9c135da5608c2a9a11c167e1eee13da90dc0a0dba579ad03356af5e6d2743
1	user_particulier	352	0001-01-01	2015-11-06	t@t.y	0101000020E610000066321CCF677448405133A48AE2A50240	\\x3a2f29a9e0edd0ebec054bf3f22fe76eff364bc36bb3d5c71f877449cf14ffe8bb8bb2338475033627d9b6674442328b5b48a2549510fd78af2ef9d21ab5a95f	\\x3a2f29a9e0edd0ebec054bf3f22fe76eff364bc36bb3d5c71f877449cf14ffe8bb8bb2338475033627d9b6674442328b5b48a2549510fd78af2ef9d21ab5a95f
1	user_particulier	350	0001-01-01	2015-11-06	a@an.a	0101000020E6100000839BD6B7DDA50240258B451D67744840	\\xa70018a4ab7c9b65fec726aa2a2283f5a9b27870f98ebd081c3e74b47bd5bfb5fede955adb1d84117ea938774c29e89d0f599337ffb9ae8aa91b4eb237a7977c	\\xa70018a4ab7c9b65fec726aa2a2283f5a9b27870f98ebd081c3e74b47bd5bfb5fede955adb1d84117ea938774c29e89d0f599337ffb9ae8aa91b4eb237a7977c
1	user_particulier	348	0001-01-01	2015-11-05	j'aime@g.m	0101000020E61000000199E7D209D20240D80DDB1665724840	\N	\\xf70276e8aba46c3d1eb5e00a2c677fd86d7e21ef16943681a67d6a69e11e7baaab876650ff2c19259312dadfdaea2422603e0132495d837fb4c94caa9e3dfbc8
1	user_particulier	345	0001-01-01	2015-11-05	pm@pm.pm	0101000020E61000008503C69F4D714840C73A0B314D970240	\\x5acf703f4ad9c5c2ce41cd78d87fdfeb64f396d8650fb1d87c3ebc35a277bda814e4d9535f3f4dd04ec46ee07f0f314195d2212e40a82797972e7a9bc881e8f5	\\xafd961302c35b7d45680849560d00f6f23570aaa5c58e0091ee56c6c6974f5aff778c1d7565460bed839fd3d78e236d5e3663a9c7343c76f91629c747e87a82a
\.


--
-- Name: user_id_user_seq; Type: SEQUENCE SET; Schema: public; Owner: wibo
--

SELECT pg_catalog.setval('user_id_user_seq', 357, true);


SET search_path = topology, pg_catalog;

--
-- Data for Name: topology; Type: TABLE DATA; Schema: topology; Owner: wibo
--

COPY topology (id, name, srid, "precision", hasz) FROM stdin;
\.


--
-- Data for Name: layer; Type: TABLE DATA; Schema: topology; Owner: wibo
--

COPY layer (topology_id, layer_id, schema_name, table_name, feature_column, feature_type, level, child_id) FROM stdin;
\.


SET search_path = public, pg_catalog;

--
-- Name: ballonwork_pkey; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY ballonwork
    ADD CONSTRAINT ballonwork_pkey PRIMARY KEY (idbw);


--
-- Name: checkpoints_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY checkpoints
    ADD CONSTRAINT checkpoints_pk PRIMARY KEY (id);


--
-- Name: container_ianix_key; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY container
    ADD CONSTRAINT container_ianix_key UNIQUE (ianix);


--
-- Name: container_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY container
    ADD CONSTRAINT container_pk PRIMARY KEY (id);


--
-- Name: device_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY device
    ADD CONSTRAINT device_pk PRIMARY KEY (id);


--
-- Name: dist_iduser; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY stats_users
    ADD CONSTRAINT dist_iduser UNIQUE (iduser_stats);


--
-- Name: followed_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY followed
    ADD CONSTRAINT followed_pk PRIMARY KEY (id);


--
-- Name: message_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY message
    ADD CONSTRAINT message_pk PRIMARY KEY (id);


--
-- Name: reception_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY reception
    ADD CONSTRAINT reception_pk PRIMARY KEY (id);


--
-- Name: shared_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY shared
    ADD CONSTRAINT shared_pk PRIMARY KEY (id);


--
-- Name: st_user_id; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY stats_users
    ADD CONSTRAINT st_user_id PRIMARY KEY (id_stats);


--
-- Name: stats_container_idball_stats_key; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY stats_container
    ADD CONSTRAINT stats_container_idball_stats_key UNIQUE (idball_stats);


--
-- Name: stats_container_pkey; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY stats_container
    ADD CONSTRAINT stats_container_pkey PRIMARY KEY (id_st);


--
-- Name: type_container_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY type_container
    ADD CONSTRAINT type_container_pk PRIMARY KEY (id_type_c);


--
-- Name: type_device_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY type_device
    ADD CONSTRAINT type_device_pk PRIMARY KEY (id_type_d);


--
-- Name: type_group_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY type_group
    ADD CONSTRAINT type_group_pk PRIMARY KEY (id_type_g);


--
-- Name: type_information_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY type_information
    ADD CONSTRAINT type_information_pk PRIMARY KEY (id_type_info);


--
-- Name: type_message_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY type_message
    ADD CONSTRAINT type_message_pk PRIMARY KEY (id_type_m);


--
-- Name: user_pk; Type: CONSTRAINT; Schema: public; Owner: wibo; Tablespace: 
--

ALTER TABLE ONLY "user"
    ADD CONSTRAINT user_pk PRIMARY KEY (id_user);


--
-- Name: checkpoints_container_id_idx; Type: INDEX; Schema: public; Owner: wibo; Tablespace: 
--

CREATE INDEX checkpoints_container_id_idx ON checkpoints USING btree (containerid, date);


--
-- Name: constraint_mail; Type: INDEX; Schema: public; Owner: wibo; Tablespace: 
--

CREATE UNIQUE INDEX constraint_mail ON "user" USING btree (mail);


--
-- Name: message_idx_container; Type: INDEX; Schema: public; Owner: wibo; Tablespace: 
--

CREATE INDEX message_idx_container ON message USING btree (containerid);


--
-- Name: stats_container; Type: TRIGGER; Schema: public; Owner: wibo
--

CREATE TRIGGER stats_container AFTER INSERT ON container FOR EACH ROW EXECUTE PROCEDURE create_statsballon();


--
-- Name: stats_users; Type: TRIGGER; Schema: public; Owner: wibo
--

CREATE TRIGGER stats_users AFTER INSERT ON "user" FOR EACH ROW EXECUTE PROCEDURE create_statsuser();


--
-- Name: checkpoints_container; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY checkpoints
    ADD CONSTRAINT checkpoints_container FOREIGN KEY (containerid) REFERENCES container(id);


--
-- Name: container_user; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY container
    ADD CONSTRAINT container_user FOREIGN KEY (idcreator) REFERENCES "user"(id_user);


--
-- Name: device_user; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY device
    ADD CONSTRAINT device_user FOREIGN KEY (user_id_user) REFERENCES "user"(id_user);


--
-- Name: followed_container; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY followed
    ADD CONSTRAINT followed_container FOREIGN KEY (container_id) REFERENCES container(id);


--
-- Name: followed_device; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY followed
    ADD CONSTRAINT followed_device FOREIGN KEY (device_id) REFERENCES device(id);


--
-- Name: message_container; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY message
    ADD CONSTRAINT message_container FOREIGN KEY (containerid) REFERENCES container(id);


--
-- Name: message_device; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY message
    ADD CONSTRAINT message_device FOREIGN KEY (device_id) REFERENCES device(id);


--
-- Name: reception_device; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY reception
    ADD CONSTRAINT reception_device FOREIGN KEY (device_id) REFERENCES device(id);


--
-- Name: shared_device; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY shared
    ADD CONSTRAINT shared_device FOREIGN KEY (device_id) REFERENCES device(id);


--
-- Name: stats_id_container; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY stats_container
    ADD CONSTRAINT stats_id_container FOREIGN KEY (idball_stats) REFERENCES container(id);


--
-- Name: stats_users_user; Type: FK CONSTRAINT; Schema: public; Owner: wibo
--

ALTER TABLE ONLY stats_users
    ADD CONSTRAINT stats_users_user FOREIGN KEY (iduser_stats) REFERENCES "user"(id_user);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

